% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Clarity_createOpenMonitor.R
\name{Clarity_createOpenMonitor}
\alias{Clarity_createOpenMonitor}
\title{Create a new Clarity 'mts_monitor' object}
\usage{
Clarity_createOpenMonitor(
  api_key = NULL,
  synoptic = NULL,
  datasourceId = NULL,
  format = "USFS",
  parameter = c("pm2.5", "nowcast"),
  applyQC = TRUE
)
}
\arguments{
\item{api_key}{Clarity API READ Key. If \code{api_key = NULL}, it
will be obtained using \code{getAPIKey("Clarity-read")}.}

\item{synoptic}{Previously generated \emph{synoptic} object containing \code{datasourceId}.}

\item{datasourceId}{Clarity sensor identifier.}

\item{format}{Customized output format (currently only "USFS").}

\item{parameter}{Parameter to use for data ("pm2.5" or "nowcast")}

\item{applyQC}{Logical specifying whether to use the Clarity QCFlag to
invalidate data values.}
}
\value{
An AirMonitor package \emph{mts_monitor} object.
}
\description{
Download, parse and enhance hourly timeseries data from Clarity
and create an object of class \code{mts_monitor} for use with the AirMonitor
package.
}
\examples{
\donttest{
# Fail gracefully if any resources are not available
try({

library(AirSensor2)

initializeMazamaSpatialUtils()

synoptic <-
  Clarity_createOpenSynoptic(
    api_key = Clarity_API_READ_KEY
  )

mon <-
  Clarity_createOpenMonitor(
    api_key = Clarity_API_READ_KEY,
    synoptic = synoptic,
    datasourceId = "DACHW7097",
    parameter = "pm2.5"
  )

}, silent = FALSE)
}
}
